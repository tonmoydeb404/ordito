# .github/actions/generate-updater/action.yml
name: "Generate Updater JSON"
description: "Generate updater JSON file and publish release"

inputs:
  tag:
    description: "Git tag to generate updater for"
    required: true
  github_token:
    description: "GitHub token for release access"
    required: true
  release_notes:
    description: "Custom release notes"
    required: false
    default: ""
  repository:
    description: "GitHub repository (owner/repo)"
    required: true

outputs:
  updater_url:
    description: "URL to the updater JSON file"
    value: ${{ steps.publish.outputs.updater_url }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Get release info
      id: release_info
      shell: bash
      run: |
        TAG="${{ inputs.tag }}"
        RELEASE_TAG="$TAG"
        VERSION=${TAG#v}
        PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "pub_date=$PUB_DATE" >> $GITHUB_OUTPUT

        echo "Processing:"
        echo "  Original tag: $TAG"
        echo "  Release tag: $RELEASE_TAG"
        echo "  Version: $VERSION"
        echo "  Date: $PUB_DATE"

    - name: Download release assets
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "📥 Downloading assets for release: ${{ steps.release_info.outputs.release_tag }}"
        echo "Repository: ${{ inputs.repository }}"

        # Get all releases and find our target release
        ALL_RELEASES=$(gh api repos/${{ inputs.repository }}/releases)
        RELEASE_DATA=$(echo "$ALL_RELEASES" | jq -r ".[] | select(.tag_name == \"${{ steps.release_info.outputs.release_tag }}\")")

        if [ -z "$RELEASE_DATA" ] || [ "$RELEASE_DATA" = "null" ]; then
          echo "❌ Release not found: ${{ steps.release_info.outputs.release_tag }}"
          exit 1
        fi

        # Extract release info
        RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
        echo "✅ Release found! ID: $RELEASE_ID"

        # Create assets directory
        mkdir -p assets

        # Download assets using GitHub API
        ASSETS=$(gh api repos/${{ inputs.repository }}/releases/$RELEASE_ID/assets)
        echo "$ASSETS" | jq -r '.[] | select(.name | test("\\.(AppImage|AppImage\\.sig|msi|msi\\.sig|exe|exe\\.sig|app\\.tar\\.gz|app\\.tar\\.gz\\.sig)$")) | .url' | while read asset_url; do
          ASSET_INFO=$(echo "$ASSETS" | jq -r ".[] | select(.url == \"$asset_url\")")
          ASSET_NAME=$(echo "$ASSET_INFO" | jq -r '.name')
          
          echo "Downloading: $ASSET_NAME"
          curl -L \
               -H "Authorization: Bearer ${{ inputs.github_token }}" \
               -H "Accept: application/octet-stream" \
               "$asset_url" \
               -o "assets/$ASSET_NAME" \
               --fail --silent --show-error
        done

        echo "Downloaded assets:"
        ls -la assets/

    - name: Generate updater JSON
      shell: bash
      env:
        VERSION: ${{ steps.release_info.outputs.version }}
        TAG_NAME: ${{ steps.release_info.outputs.release_tag }}
        PUB_DATE: ${{ steps.release_info.outputs.pub_date }}
        REPOSITORY: ${{ inputs.repository }}
        RELEASE_NOTES: ${{ inputs.release_notes || format('Release v{0}. Download the appropriate installer for your platform.', steps.release_info.outputs.version) }}
      run: |
        echo "🔧 Generating updater JSON..."

        find_asset() {
          local pattern="$1"
          find assets -name "$pattern" -type f | head -1
        }

        generate_platform() {
          local platform="$1"
          local file_pattern="$2"
          local sig_pattern="$3"
          
          local main_file=$(find_asset "$file_pattern")
          local sig_file=$(find_asset "$sig_pattern")
          
          if [[ -n "$main_file" && -n "$sig_file" ]]; then
            local signature=$(cat "$sig_file" | tr -d '\n')
            local filename=$(basename "$main_file")
            local download_url="https://github.com/$REPOSITORY/releases/download/$TAG_NAME/$filename"
            
            echo "  ✅ $platform: $filename" >&2
            
            echo "    \"$platform\": {"
            echo "      \"signature\": \"$signature\","
            echo "      \"url\": \"$download_url\""
            echo "    },"
          else
            echo "  ⏭️  Skipped $platform (missing files)" >&2
            return 1
          fi
        }

        cat > latest.json << 'EOF'
        {
          "version": "$VERSION",
          "notes": "$RELEASE_NOTES",
          "pub_date": "$PUB_DATE",
          "platforms": {
        EOF

        platforms_added=0
        echo "📦 Processing platforms..."

        if generate_platform "linux-x86_64" "*.AppImage" "*.AppImage.sig" >> latest.json; then
          platforms_added=$((platforms_added + 1))
        fi

        if generate_platform "windows-x86_64" "*-setup.exe" "*-setup.exe.sig" >> latest.json; then
          platforms_added=$((platforms_added + 1))
        fi

        if [ $platforms_added -eq 0 ]; then
          if generate_platform "windows-x86_64" "*.msi" "*.msi.sig" >> latest.json; then
            platforms_added=$((platforms_added + 1))
          fi
        fi

        if generate_platform "darwin-x86_64" "*_x64.app.tar.gz" "*_x64.app.tar.gz.sig" >> latest.json; then
          platforms_added=$((platforms_added + 1))
        fi

        if generate_platform "darwin-aarch64" "*_aarch64.app.tar.gz" "*_aarch64.app.tar.gz.sig" >> latest.json; then
          platforms_added=$((platforms_added + 1))
        fi

        if generate_platform "darwin-universal" "*.app.tar.gz" "*.app.tar.gz.sig" >> latest.json; then
          platforms_added=$((platforms_added + 1))
        fi

        if [ $platforms_added -eq 0 ]; then
          echo "❌ No valid platform assets found!"
          ls -la assets/
          exit 1
        fi

        sed -i '$ s/,$//' latest.json
        cat >> latest.json << 'EOF'
          }
        }
        EOF

        echo "✅ Generated updater JSON for $platforms_added platform(s)"

    - name: Validate JSON
      shell: bash
      run: |
        echo "🔍 Validating generated JSON..."

        if ! jq empty latest.json 2>/dev/null; then
          echo "❌ Invalid JSON syntax!"
          cat latest.json
          exit 1
        fi

        echo "✅ JSON validation passed!"
        echo "Generated JSON:"
        jq '.' latest.json

    - name: Upload and publish
      id: publish
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "📤 Uploading latest.json to release..."

        gh release upload ${{ steps.release_info.outputs.release_tag }} latest.json \
          --repo ${{ inputs.repository }} \
          --clobber

        echo "📢 Publishing release..."

        gh release edit ${{ steps.release_info.outputs.release_tag }} \
          --repo ${{ inputs.repository }} \
          --draft=false

        UPDATER_URL="https://github.com/${{ inputs.repository }}/releases/latest/download/latest.json"
        echo "updater_url=$UPDATER_URL" >> $GITHUB_OUTPUT

        echo "🎉 Release published!"
        echo "🔗 Updater endpoint: $UPDATER_URL"
